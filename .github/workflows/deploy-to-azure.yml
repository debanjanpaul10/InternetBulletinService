name: Build and Deploy InternetBulletin

env:
  API_PROJECT_PATH: InternetBulletin.API/InternetBulletin.API.csproj
  WEB_PROJECT_PATH: InternetBulletin.Web
  DATABASE_PROJECT_PATH: InternetBulletin.Database/InternetBulletin.Database.sqlproj
  FUNCTION_PROJECT_PATH: InternetBulletin.Functions/InternetBulletin.Functions.csproj
  TEST_PROJECT_PATH: InternetBulletin.UnitTests/InternetBulletin.Tests.csproj

on:
  workflow_dispatch:
    inputs:
      deploy_api:
        description: 'InternetBulletin.API'
        required: false
        default: false
        type: boolean

      deploy_web:
        description: 'InternetBulletin.Web'
        required: false
        default: false
        type: boolean

      deploy_database:
        description: 'InternetBulletin.Database'
        required: false
        default: false
        type: boolean
      
      deploy_function:
        description: 'InternetBulletin.Functions'
        required: false
        default: false
        type: boolean

jobs:
  #region API

  build-and-deploy-api:
    name: Build and Deploy InternetBulletin.API
    if: ${{ inputs.deploy_api }}
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    # Install dependencies
    - name: Install dependencies and Build solution
      run:  |
        dotnet restore ${{ env.API_PROJECT_PATH }}
        dotnet build ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore

    # Publish the project to a folder
    - name: Publish the project
      run:  |
        dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --output ./publish-api

    # Deploy to Azure App Service
    - name: Deploy to Azure App Service
      uses: Azure/webapps-deploy@v2
      with:
        app-name: app-webapi-internet-bulletin
        slot-name: production
        publish-profile: ${{ secrets.AZURE_IBBS_API_PUBLISH_PROFILE }}
        package: ./publish-api
    
  #endregion

  #region WEB

  build-and-deploy-web:
    name: Build and Deploy InternetBulletin.Web
    if: ${{ inputs.deploy_web }}
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
      
    # Install dependencies and build React-vite project
    - name: Install dependencies and build web
      run:  |
        cd ${{ env.WEB_PROJECT_PATH }}
        npm install
        npm run build

    # Deploy the React-Vite project to Azure Web App
    - name: Deploy Web to Azure Static Web App
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_IBBS_WEB_DEPLOYMENT_SECRET }}
        action: 'upload'
        app_location: ${{ env.WEB_PROJECT_PATH }}
        output_location: 'dist'

  #endregion

  #region Database

  build-and-deploy-database:
    name: Build and Deploy InternetBulletin.Database
    if: ${{ inputs.deploy_database }}
    runs-on: windows-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Azure Login
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_DB_SECRET }}

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    # Install dependencies
    - name: Install dependencies and Build solution
      run:  |
        dotnet restore ${{ env.DATABASE_PROJECT_PATH }}
        dotnet build ${{ env.DATABASE_PROJECT_PATH }} --configuration Release --no-restore

    # Publish the project to a folder
    - name: Publish the project
      run:  |
        dotnet publish ${{ env.DATABASE_PROJECT_PATH }} --configuration Release --output ./publish-db

    # Deploy to Azure SQL Server
    - name: Deploy to Azure SQL Server
      uses: azure/sql-action@v2.3
      with:
        connection-string: ${{ secrets.AZURE_DB_CONNECTION_STRING }}
        path: './publish-db/InternetBulletin.Database.dacpac'
        action: 'publish'
        arguments: '/p:DropObjectsNotInSource=true'

  #endregion

  #region Azure Function

  build-and-deploy-function:
    name: Build and Deploy InternetBulletin.Functions
    if: ${{inputs.deploy_function}}
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v4
      
    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    # Install dependencies
    - name: Install dependencies and Build solution
      run:  |
        dotnet restore ${{ env.FUNCTION_PROJECT_PATH }}
        dotnet build ${{ env.FUNCTION_PROJECT_PATH }} --configuration Release --no-restore

    # Publish the project to a folder
    - name: Publish the project
      run:  |
        dotnet publish ${{ env.FUNCTION_PROJECT_PATH }} --configuration Release --output ./publish-function

    # Run Azure Functions action
    - name: Run Azure Functions action
      uses: Azure/functions-action@v1
      with:
        app-name: func-internet-bulletin
        package: ./publish-function
        sku: 'flexconsumption'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }} 

  #endregion

  #region Tests
  internet-bulletin-tests:
    name: InternetBulletin.UnitTests
    needs: [build-and-deploy-api, build-and-deploy-function]
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    # Run tests
    - name: Run .NET Tests
      run:  |
        dotnet restore ${{ env.TEST_PROJECT_PATH }}
        dotnet build ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-restore
        dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --no-build

  #endregion

        
