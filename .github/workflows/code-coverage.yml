name: Code Coverage for Unit Tests

env:
    TEST_PROJECT_PATH: InternetBulletin.UnitTests/InternetBulletin.UnitTests.csproj

on:
    pull_request:
        branches: [dev, main]
    push:
        branches: [dev, main]

permissions:
    pull-requests: write
    contents: read
    statuses: write

jobs:
    internet-bulletin-tests:
        name: Unit tests and coverage
        runs-on: ubuntu-latest

        steps:
            # Checkout the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Setup .NET
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "9.0.x"

            # Run tests with coverage
            - name: Run .NET Tests with Coverage
              id: coverage
              run: |
                  dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

                  # Extract coverage percentage from the coverage report
                  COVERAGE=$(grep -oP 'line-rate="\K[^"]+' coverage/**/coverage.cobertura.xml | head -1)
                  echo "Raw coverage value: $COVERAGE"

                  # Convert to percentage and round to 2 decimal places
                  COVERAGE_PCT=$(echo "scale=2; $COVERAGE * 100" | bc)
                  echo "Coverage percentage: $COVERAGE_PCT%"

                  # Set outputs
                  echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
                  echo "coverage_pct=$COVERAGE_PCT" >> $GITHUB_OUTPUT

                  # Set status (using float comparison)
                  if (( $(echo "$COVERAGE >= 0.60" | bc -l) )); then
                    echo "status=success" >> $GITHUB_OUTPUT
                    echo "Status set to success"
                  else
                    echo "status=failure" >> $GITHUB_OUTPUT
                    echo "Status set to failure"
                  fi

            - name: Update Status Check
              uses: actions/github-script@v6
              with:
                  script: |
                      const coverage = '${{ steps.coverage.outputs.coverage }}';
                      const coveragePct = '${{ steps.coverage.outputs.coverage_pct }}';
                      const status = '${{ steps.coverage.outputs.status }}';

                      await github.rest.repos.createCommitStatus({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        sha: context.sha,
                        state: status,
                        context: 'Code Coverage',
                        description: `Code coverage: ${coveragePct}%`,
                        target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
                      });
