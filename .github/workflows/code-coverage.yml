name: Code Coverage for Unit Tests

env:
    TEST_PROJECT_PATH: InternetBulletin.UnitTests/InternetBulletin.UnitTests.csproj

on:
    pull_request:
        branches: [dev, main]
    push:
        branches: [dev, main]

# Add permissions block
permissions:
    pull-requests: write
    contents: read
    statuses: write

jobs:
    #region Tests
    internet-bulletin-tests:
        name: Unit tests and coverage
        runs-on: ubuntu-latest

        steps:
            # Checkout the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Setup .NET
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "9.0.x"

            # Run tests with coverage
            - name: Run .NET Tests with Coverage
              id: coverage
              run: |
                  dotnet test ${{ env.TEST_PROJECT_PATH }} --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
                  # Extract coverage percentage from the coverage report
                  COVERAGE=$(grep -oP 'line-rate="\K[^"]+' coverage/**/coverage.cobertura.xml | head -1)
                  echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
                  # Set status check
                  if (( $(echo "$COVERAGE >= 60" | bc -l) )); then
                    echo "status=success" >> $GITHUB_OUTPUT
                  else
                    echo "status=failure" >> $GITHUB_OUTPUT
                  fi

            - name: Code Coverage Report
              uses: irongut/CodeCoverageSummary@v1.3.0
              with:
                  filename: coverage/**/coverage.cobertura.xml
                  badge: true
                  fail_below_min: true
                  format: markdown
                  hide_branch_rate: false
                  hide_complexity: false
                  indicators: true
                  output: both
                  thresholds: "60 80"

            - name: Add Coverage PR Comment
              uses: marocchino/sticky-pull-request-comment@v2
              if: github.event_name == 'pull_request'
              with:
                  recreate: true
                  path: code-coverage-results.md

            - name: Update Status Check
              uses: actions/github-script@v6
              with:
                  script: |
                    const coverage = '${{ steps.coverage.outputs.coverage }}';
                    const status = '${{ steps.coverage.outputs.status }}';
                    
                    await github.rest.repos.createCommitStatus({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      sha: context.sha,
                      state: status,
                      context: 'Code Coverage',
                      description: `Code coverage: ${(parseFloat(coverage) * 100).toFixed(2)}%`,
                      target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
                    });
    # endregion
